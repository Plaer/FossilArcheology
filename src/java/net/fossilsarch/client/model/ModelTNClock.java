
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX





package net.fossilsarch.client.model;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.util.MathHelper;

public class ModelTNClock extends ModelBase
{
      //fields
    ModelRenderer H;
    ModelRenderer M;
    ModelRenderer axie;
    ModelRenderer C;
    ModelRenderer C2;
    ModelRenderer C3;
    ModelRenderer C21;
    ModelRenderer C31;
      
      public ModelTNClock()
      {
        H = new ModelRenderer(this, 0, 5).setTextureSize(64, 32);;
        H.addBox(-0.5333334F, -3F, -0.5F, 1, 3, 1);
        H.setRotationPoint(0F, 0F, 0F);
        setRotation(H, 0F, 0F, 0F);
        H.mirror = true;
        M = new ModelRenderer(this, 0, 0).setTextureSize(64, 32);;
        M.addBox(-0.5F, -4F, -0.5F, 1, 4, 1);
        M.setRotationPoint(0F, 0F, 0F);
        setRotation(M, 0F, 0F, 0F);
        M.mirror = true;
        axie = new ModelRenderer(this, 22, 0).setTextureSize(64, 32);;
        axie.addBox(-1F, -1F, -1F, 2, 2, 2);
        axie.setRotationPoint(0F, 0F, 0F);
        setRotation(axie, 0.01745329F, 0F, 0F);
        axie.mirror = true;
        C = new ModelRenderer(this, 4, 0).setTextureSize(64, 32);;
        C.addBox(-4F, -4F, 0F, 8, 8, 1);
        C.setRotationPoint(0F, 0F, 0F);
        setRotation(C, 0F, 0F, 0F);
        C.mirror = true;
        C2 = new ModelRenderer(this, 0, 10).setTextureSize(64, 32);;
        C2.addBox(-4.5F, -4.5F, -0.5F, 9, 9, 2);
        C2.setRotationPoint(0F, 0F, 0F);
        setRotation(C2, 0F, 0F, 0F);
        C2.mirror = true;
        C3 = new ModelRenderer(this, 0, 21).setTextureSize(64, 32);;
        C3.addBox(-4.5F, -4.5F, -0.5F, 9, 9, 2);
        C3.setRotationPoint(0F, 0F, 0F);
        setRotation(C3, 0F, 0F, 0.7853982F);
        C3.mirror = true;
        C21 = new ModelRenderer(this, 22, 19).setTextureSize(64, 32);;
        C21.addBox(-5F, -5F, -1F, 10, 10, 3);
        C21.setRotationPoint(0F, 0F, 0F);
        setRotation(C21, 0F, 0F, 0F);
        C21.mirror = true;
        C31 = new ModelRenderer(this, 22, 6).setTextureSize(64, 32);;
        C31.addBox(-5F, -5F, -1F, 10, 10, 3);
        C31.setRotationPoint(0F, 0F, 0F);
        setRotation(C31, 0F, 0F, 0.7853982F);
        C31.mirror = true;
      }

      public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
      {
        super.render(entity, f, f1, f2, f3, f4, f5);
        setRotationAngles(f, f1, f2, f3, f4, f5,entity);
        H.render(f5);
        M.render(f5);
        axie.render(f5);
        C.render(f5);
        C2.render(f5);
        C3.render(f5);
        C21.render(f5);
        C31.render(f5);
      }

      public void EdgeRotate(float f, float f1, float f2, float f3, float f4, float f5)
      {
          C2.rotateAngleX = MathHelper.cos(f / (1.919107651F * 2.5F )) * 0.523598775598299F * f1 + 0F ;
         //C2.rotateAngleY = MathHelper.cos(f / (1.919107651F * 2.5F )) * 3.14159265358979F * f1 + 0F ;
         C2.rotateAngleZ = MathHelper.cos(f / (1.919107651F * 5F )) * 3.14159265358979F * f1 + 0F ;
         
          
         
         
         //C3.rotateAngleY = MathHelper.cos(f / (1.919107651F * 2.5F )) * 3.14159265358979F * f1 + 0F ;
         C3.rotateAngleX = MathHelper.cos(f / (1.919107651F * 2.5F )) * 0.523598775598299F * f1 + 0F ;
         C3.rotateAngleZ = MathHelper.cos(f / (1.919107651F * 5F )) * 3.14159265358979F * f1 + 0.785398163397448F ;
         
          C21.rotateAngleX = MathHelper.cos(f / (1.919107651F * 2.5F )) * -0.523598775598299F * f1 + 0F ;
         //C21.rotateAngleY = MathHelper.cos(f / (1.919107651F * 2.5F )) * -3.14159265358979F * f1 + 0F ;
         C21.rotateAngleZ = MathHelper.cos(f / (1.919107651F * 5F )) * -3.14159265358979F * f1 + 0F ;
         
          C31.rotateAngleX = MathHelper.cos(f / (1.919107651F * 2.5F )) * -0.523598775598299F * f1 + 0F ;
         //C31.rotateAngleY = MathHelper.cos(f / (1.919107651F * 2.5F )) * -3.14159265358979F * f1 + 0F ;
         C31.rotateAngleZ = MathHelper.cos(f / (1.919107651F * 5F )) * -3.14159265358979F * f1 + 0.785398163397448F ;
         
         
      }
      public void EdgePullBack()
      {
          C2.rotateAngleX =0;
         C2.rotateAngleY = 0;
         C2.rotateAngleZ = 0;
         C3.rotateAngleX =0F ;
        C3.rotateAngleY = 0F ;
        C3.rotateAngleZ =0.785398163397448F ;
        C21.rotateAngleX = 0F ;
       C21.rotateAngleY = 0F ;
       C21.rotateAngleZ = 0F ;
        C31.rotateAngleX = 0F ;
       C31.rotateAngleY = 0F ;
       C31.rotateAngleZ =0.785398163397448F ;
      }
      public void UpdateTime(float HourRndAngle,float MinRndAngle)
      {
    	  if (HourRndAngle<=Math.PI)H.rotateAngleZ=HourRndAngle;
    	  else H.rotateAngleZ=(float) (HourRndAngle-2*Math.PI);
    	  if (MinRndAngle<=Math.PI)M.rotateAngleZ=MinRndAngle;
    	  else M.rotateAngleZ=(float) (MinRndAngle-2*Math.PI);
      }
      private void setRotation(ModelRenderer model, float x, float y, float z)
      {
        model.rotateAngleX = x;
        model.rotateAngleY = y;
        model.rotateAngleZ = z;
      }
}
